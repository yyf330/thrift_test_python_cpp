/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ProcessCheckL_H
#define ProcessCheckL_H

#include <thrift/TDispatchProcessor.h>
#include "checklicense_types.h"



class ProcessCheckLIf {
 public:
  virtual ~ProcessCheckLIf() {}
  virtual void store(const ProcessProfile& process) = 0;
  virtual void get(ProcessProfile& _return, const int32_t process_id) = 0;
  virtual int32_t CheckLicense() = 0;
};

class ProcessCheckLIfFactory {
 public:
  typedef ProcessCheckLIf Handler;

  virtual ~ProcessCheckLIfFactory() {}

  virtual ProcessCheckLIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(ProcessCheckLIf* /* handler */) = 0;
};

class ProcessCheckLIfSingletonFactory : virtual public ProcessCheckLIfFactory {
 public:
  ProcessCheckLIfSingletonFactory(const boost::shared_ptr<ProcessCheckLIf>& iface) : iface_(iface) {}
  virtual ~ProcessCheckLIfSingletonFactory() {}

  virtual ProcessCheckLIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(ProcessCheckLIf* /* handler */) {}

 protected:
  boost::shared_ptr<ProcessCheckLIf> iface_;
};

class ProcessCheckLNull : virtual public ProcessCheckLIf {
 public:
  virtual ~ProcessCheckLNull() {}
  void store(const ProcessProfile& /* process */) {
    return;
  }
  void get(ProcessProfile& /* _return */, const int32_t /* process_id */) {
    return;
  }
  int32_t CheckLicense() {
    int32_t _return = 0;
    return _return;
  }
};

typedef struct _ProcessCheckL_store_args__isset {
  _ProcessCheckL_store_args__isset() : process(false) {}
  bool process;
} _ProcessCheckL_store_args__isset;

class ProcessCheckL_store_args {
 public:

  ProcessCheckL_store_args() {
  }

  virtual ~ProcessCheckL_store_args() throw() {}

  ProcessProfile process;

  _ProcessCheckL_store_args__isset __isset;

  void __set_process(const ProcessProfile& val) {
    process = val;
  }

  bool operator == (const ProcessCheckL_store_args & rhs) const
  {
    if (!(process == rhs.process))
      return false;
    return true;
  }
  bool operator != (const ProcessCheckL_store_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProcessCheckL_store_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ProcessCheckL_store_pargs {
 public:


  virtual ~ProcessCheckL_store_pargs() throw() {}

  const ProcessProfile* process;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ProcessCheckL_store_result {
 public:

  ProcessCheckL_store_result() {
  }

  virtual ~ProcessCheckL_store_result() throw() {}


  bool operator == (const ProcessCheckL_store_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ProcessCheckL_store_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProcessCheckL_store_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ProcessCheckL_store_presult {
 public:


  virtual ~ProcessCheckL_store_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ProcessCheckL_get_args__isset {
  _ProcessCheckL_get_args__isset() : process_id(false) {}
  bool process_id;
} _ProcessCheckL_get_args__isset;

class ProcessCheckL_get_args {
 public:

  ProcessCheckL_get_args() : process_id(0) {
  }

  virtual ~ProcessCheckL_get_args() throw() {}

  int32_t process_id;

  _ProcessCheckL_get_args__isset __isset;

  void __set_process_id(const int32_t val) {
    process_id = val;
  }

  bool operator == (const ProcessCheckL_get_args & rhs) const
  {
    if (!(process_id == rhs.process_id))
      return false;
    return true;
  }
  bool operator != (const ProcessCheckL_get_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProcessCheckL_get_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ProcessCheckL_get_pargs {
 public:


  virtual ~ProcessCheckL_get_pargs() throw() {}

  const int32_t* process_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ProcessCheckL_get_result__isset {
  _ProcessCheckL_get_result__isset() : success(false) {}
  bool success;
} _ProcessCheckL_get_result__isset;

class ProcessCheckL_get_result {
 public:

  ProcessCheckL_get_result() {
  }

  virtual ~ProcessCheckL_get_result() throw() {}

  ProcessProfile success;

  _ProcessCheckL_get_result__isset __isset;

  void __set_success(const ProcessProfile& val) {
    success = val;
  }

  bool operator == (const ProcessCheckL_get_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ProcessCheckL_get_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProcessCheckL_get_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ProcessCheckL_get_presult__isset {
  _ProcessCheckL_get_presult__isset() : success(false) {}
  bool success;
} _ProcessCheckL_get_presult__isset;

class ProcessCheckL_get_presult {
 public:


  virtual ~ProcessCheckL_get_presult() throw() {}

  ProcessProfile* success;

  _ProcessCheckL_get_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class ProcessCheckL_CheckLicense_args {
 public:

  ProcessCheckL_CheckLicense_args() {
  }

  virtual ~ProcessCheckL_CheckLicense_args() throw() {}


  bool operator == (const ProcessCheckL_CheckLicense_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ProcessCheckL_CheckLicense_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProcessCheckL_CheckLicense_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ProcessCheckL_CheckLicense_pargs {
 public:


  virtual ~ProcessCheckL_CheckLicense_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ProcessCheckL_CheckLicense_result__isset {
  _ProcessCheckL_CheckLicense_result__isset() : success(false) {}
  bool success;
} _ProcessCheckL_CheckLicense_result__isset;

class ProcessCheckL_CheckLicense_result {
 public:

  ProcessCheckL_CheckLicense_result() : success(0) {
  }

  virtual ~ProcessCheckL_CheckLicense_result() throw() {}

  int32_t success;

  _ProcessCheckL_CheckLicense_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const ProcessCheckL_CheckLicense_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ProcessCheckL_CheckLicense_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProcessCheckL_CheckLicense_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ProcessCheckL_CheckLicense_presult__isset {
  _ProcessCheckL_CheckLicense_presult__isset() : success(false) {}
  bool success;
} _ProcessCheckL_CheckLicense_presult__isset;

class ProcessCheckL_CheckLicense_presult {
 public:


  virtual ~ProcessCheckL_CheckLicense_presult() throw() {}

  int32_t* success;

  _ProcessCheckL_CheckLicense_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ProcessCheckLClient : virtual public ProcessCheckLIf {
 public:
  ProcessCheckLClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  ProcessCheckLClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void store(const ProcessProfile& process);
  void send_store(const ProcessProfile& process);
  void recv_store();
  void get(ProcessProfile& _return, const int32_t process_id);
  void send_get(const int32_t process_id);
  void recv_get(ProcessProfile& _return);
  int32_t CheckLicense();
  void send_CheckLicense();
  int32_t recv_CheckLicense();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class ProcessCheckLProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<ProcessCheckLIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (ProcessCheckLProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_store(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_CheckLicense(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  ProcessCheckLProcessor(boost::shared_ptr<ProcessCheckLIf> iface) :
    iface_(iface) {
    processMap_["store"] = &ProcessCheckLProcessor::process_store;
    processMap_["get"] = &ProcessCheckLProcessor::process_get;
    processMap_["CheckLicense"] = &ProcessCheckLProcessor::process_CheckLicense;
  }

  virtual ~ProcessCheckLProcessor() {}
};

class ProcessCheckLProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  ProcessCheckLProcessorFactory(const ::boost::shared_ptr< ProcessCheckLIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< ProcessCheckLIfFactory > handlerFactory_;
};

class ProcessCheckLMultiface : virtual public ProcessCheckLIf {
 public:
  ProcessCheckLMultiface(std::vector<boost::shared_ptr<ProcessCheckLIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~ProcessCheckLMultiface() {}
 protected:
  std::vector<boost::shared_ptr<ProcessCheckLIf> > ifaces_;
  ProcessCheckLMultiface() {}
  void add(boost::shared_ptr<ProcessCheckLIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void store(const ProcessProfile& process) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->store(process);
    }
    ifaces_[i]->store(process);
  }

  void get(ProcessProfile& _return, const int32_t process_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get(_return, process_id);
    }
    ifaces_[i]->get(_return, process_id);
    return;
  }

  int32_t CheckLicense() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->CheckLicense();
    }
    return ifaces_[i]->CheckLicense();
  }

};



#endif
