/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef checklicense_TYPES_H
#define checklicense_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>




typedef struct _ProcessProfile__isset {
  _ProcessProfile__isset() : process_id(false), c_id(false), process_type(false) {}
  bool process_id;
  bool c_id;
  bool process_type;
} _ProcessProfile__isset;

class ProcessProfile {
 public:

  static const char* ascii_fingerprint; // = "3368C2F81F2FEF71F11EDACDB2A3ECEF";
  static const uint8_t binary_fingerprint[16]; // = {0x33,0x68,0xC2,0xF8,0x1F,0x2F,0xEF,0x71,0xF1,0x1E,0xDA,0xCD,0xB2,0xA3,0xEC,0xEF};

  ProcessProfile() : process_id(0), c_id(), process_type() {
  }

  virtual ~ProcessProfile() throw() {}

  int32_t process_id;
  std::string c_id;
  std::string process_type;

  _ProcessProfile__isset __isset;

  void __set_process_id(const int32_t val) {
    process_id = val;
  }

  void __set_c_id(const std::string& val) {
    c_id = val;
  }

  void __set_process_type(const std::string& val) {
    process_type = val;
  }

  bool operator == (const ProcessProfile & rhs) const
  {
    if (!(process_id == rhs.process_id))
      return false;
    if (!(c_id == rhs.c_id))
      return false;
    if (!(process_type == rhs.process_type))
      return false;
    return true;
  }
  bool operator != (const ProcessProfile &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProcessProfile & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ProcessProfile &a, ProcessProfile &b);



#endif
