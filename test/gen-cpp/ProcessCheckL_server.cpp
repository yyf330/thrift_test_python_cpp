// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "ProcessCheckL.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

#include "begenerallib.h"
#include "besencryptf.h"

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

class ProcessCheckLHandler : virtual public ProcessCheckLIf {
 public:
  ProcessCheckLHandler() {
    // Your initialization goes here
  }

  void store(const ProcessProfile& process) {
    // Your implementation goes here
    printf("store\n");
  }

  void get(ProcessProfile& _return, const int32_t process_id) {
    // Your implementation goes here
    printf("get\n");
  }

  int32_t CheckLicense() {
    // Your implementation goes here
    printf("CheckLicense\n");
	if (BesEncryptF::IsLicenseExist() == false){
	  printf("[License]License File Not Exist!");
	  return -1;
	}

	// 
	string ExpiredDate;
	string LicenseCreateTime;

	ExpiredDate = BesEncryptF::GetLicense(BesEncryptF::LICENSE_TYPE_EXPIRED_DATE);
	LicenseCreateTime = BesEncryptF::GetLicense(BesEncryptF::LICENSE_TYPE_CREATE_TIME);

	if (BeGeneralLib::IsStringEmptyOrInvalidValue(ExpiredDate) == true)
	{
	  // 
	  printf("[License]Expired Date Invalid!");
	  return -1;
	}

	//
	if (ExpiredDate != "00000000")
	{
	  //
	  time_t LicenseCreateDate = BeGeneralLib::ConvertStringToTime(BeGeneralLib::GetTimeString(BeGeneralLib::ConvertStringToTime(LicenseCreateTime, BeGeneralLib::TIME_FORMAT_FULL_DATETIME), BeGeneralLib::TIME_FORMAT_FULL_DATE), BeGeneralLib::TIME_FORMAT_FULL_DATE);
	  if (BeGeneralLib::ConvertStringToTime(BeGeneralLib::GetTimeString(BeGeneralLib::TIME_FORMAT_FULL_DATE), BeGeneralLib::TIME_FORMAT_FULL_DATE) < LicenseCreateDate)
	  {
		  //
		  printf("[License]System Time Earlier Than License Date!");
		  return -1;
	  }

	  if (BeGeneralLib::ConvertStringToTime(BeGeneralLib::GetTimeString(BeGeneralLib::GetSystemTime(), BeGeneralLib::TIME_FORMAT_FULL_DATE), BeGeneralLib::TIME_FORMAT_FULL_DATE) > BeGeneralLib::ConvertStringToTime(ExpiredDate, BeGeneralLib::TIME_FORMAT_FULL_DATE))
	  {
		  printf("[License]License Expired!");
		  return -1;
	  }
	}
	return 1;

  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<ProcessCheckLHandler> handler(new ProcessCheckLHandler());
  shared_ptr<TProcessor> processor(new ProcessCheckLProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

