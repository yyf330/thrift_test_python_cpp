#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class ProcessProfile:
  """
  Attributes:
   - process_id
   - c_id
   - process_type
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'process_id', None, None, ), # 1
    (2, TType.STRING, 'c_id', None, None, ), # 2
    (3, TType.STRING, 'process_type', None, None, ), # 3
  )

  def __init__(self, process_id=None, c_id=None, process_type=None,):
    self.process_id = process_id
    self.c_id = c_id
    self.process_type = process_type

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.process_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.c_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.process_type = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ProcessProfile')
    if self.process_id is not None:
      oprot.writeFieldBegin('process_id', TType.I32, 1)
      oprot.writeI32(self.process_id)
      oprot.writeFieldEnd()
    if self.c_id is not None:
      oprot.writeFieldBegin('c_id', TType.STRING, 2)
      oprot.writeString(self.c_id)
      oprot.writeFieldEnd()
    if self.process_type is not None:
      oprot.writeFieldBegin('process_type', TType.STRING, 3)
      oprot.writeString(self.process_type)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
